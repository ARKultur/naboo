"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Command
const command_1 = require("@oclif/command");
const base_1 = require("../base");
// Formatters
const project_export_1 = require("../services/formatters/project-export");
// Services
const document_paths_fetcher_1 = require("../services/document-paths-fetcher");
const document_export_1 = require("../services/formatters/document-export");
const hook_runner_1 = require("../services/hook-runner");
// Types
const document_config_1 = require("../types/document-config");
class Export extends base_1.default {
    async run() {
        const { flags } = this.parse(Export);
        const documents = this.projectConfig.files();
        const formatter = new document_export_1.default();
        // From all the documentConfigs, do the export, write to local file and log the results.
        new project_export_1.default().log();
        for (const document of documents) {
            await new hook_runner_1.default(document).run(document_config_1.Hooks.beforeExport);
            const targets = new document_paths_fetcher_1.default().fetch(this.project, document);
            await Promise.all(targets.map(async ({ path, language, documentPath }) => {
                const localFile = document.fetchLocalFile(documentPath, path);
                if (!localFile)
                    return new Promise((resolve) => resolve());
                formatter.log(localFile);
                return document.export(localFile, language, documentPath, flags);
            }));
            await new hook_runner_1.default(document).run(document_config_1.Hooks.afterExport);
        }
    }
}
Export.description = 'Export files from Accent and write them to your local filesystem';
Export.examples = [`$ accent export`];
Export.args = [];
Export.flags = {
    'order-by': command_1.flags.string({
        default: 'index',
        description: 'Will be used in the export call as the order of the keys',
        options: ['index', 'key-asc'],
    }),
};
exports.default = Export;
