"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Vendor
const chalk_1 = require("chalk");
// Constants
const MASTER_ONLY_ACTIONS = ['new', 'renew', 'remove'];
class CommitOperationFormatter {
    logSync(path, documentPath) {
        console.log('  ', chalk_1.default.gray('Name in Accent:'), chalk_1.default.gray(documentPath));
        console.log('  ', chalk_1.default.white(path));
        console.log('  ', chalk_1.default.green('↑ Successfully synced in Accent'));
        console.log('');
    }
    logAddTranslations(path, documentPath) {
        console.log('  ', chalk_1.default.gray('Name in Accent:'), chalk_1.default.gray(documentPath));
        console.log('  ', chalk_1.default.white(path));
        console.log('  ', chalk_1.default.green('↑ Successfully added translations'));
        console.log('');
    }
    logEmptyExistingTarget(path) {
        console.log('  ', chalk_1.default.white(path));
        console.log('  ', chalk_1.default.gray('~~ No local file ~~'));
        console.log('');
    }
    logEmptyTarget(path) {
        console.log('  ', chalk_1.default.bold('Source:'), chalk_1.default.white(path));
        console.log('  ', chalk_1.default.gray('~~ Translations will be added on write ~~'));
        console.log('');
    }
    logPeek(path, documentPath, operations) {
        console.log('  ', chalk_1.default.gray('Name in Accent:'), chalk_1.default.gray(documentPath));
        console.log('  ', chalk_1.default.white(path));
        if (!Object.keys(operations.stats).length) {
            console.log('  ', chalk_1.default.gray('~~ No changes for this file ~~'));
        }
        Object.entries(operations.stats).map((stat, index) => {
            let actions = Object.entries(stat[1]);
            if (index > 0) {
                actions = actions.filter(([action]) => !MASTER_ONLY_ACTIONS.includes(action));
            }
            actions.map(([action, name]) => {
                console.log('  ', chalk_1.default.bold(this.formatAction(action)), ':', chalk_1.default.bold.white(name));
            });
        });
        console.log('');
    }
    formatAction(action) {
        const capitalized = action.charAt(0).toUpperCase() + action.slice(1);
        return capitalized.replace(/_/g, ' ');
    }
}
exports.default = CommitOperationFormatter;
