"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Vendor
const errors_1 = require("@oclif/errors");
const node_fetch_1 = require("node-fetch");
class ProjectFetcher {
    async fetch(config) {
        const response = await this.graphql(config);
        const data = await response.json();
        if (!data.data) {
            errors_1.error(`Can not find the project for the key: ${config.apiKey}`);
        }
        return data.data && data.data.viewer.project;
    }
    async graphql(config) {
        const query = `query ProjectDetails($project_id: ID!) {
      viewer {
        project(id: $project_id) {
          id
          name
          lastSyncedAt

          masterRevision: revision {
            id
            name
            slug

            language {
              id
              name
              slug
            }
          }

          documents(pageSize: 1000) {
            meta {
              totalEntries
            }
            entries {
              id
              path
              format
            }
          }

          revisions {
            id
            isMaster
            translationsCount
            conflictsCount
            reviewedCount
            name
            slug
            language {
              id
              name
              slug
            }
          }
        }
      }
    }`;
        return await node_fetch_1.default(`${config.apiUrl}/graphql`, {
            body: JSON.stringify({ query }),
            headers: {
                'Content-Type': 'application/json',
                authorization: `Bearer ${config.apiKey}`,
            },
            method: 'POST',
        });
    }
}
exports.default = ProjectFetcher;
