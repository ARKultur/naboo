import { Config } from '../types/config';
import { DocumentConfig } from '../types/document-config';
import { OperationResponse } from '../types/operation-response';
import { Project } from '../types/project';
export default class Document {
    paths: string[];
    readonly apiKey: string;
    readonly apiUrl: string;
    readonly config: DocumentConfig;
    readonly target: string;
    constructor(documentConfig: DocumentConfig, config: Config);
    refreshPaths(): void;
    sync(project: Project, file: string, options: any): Promise<OperationResponse>;
    addTranslations(file: string, language: string, documentPath: string, options: any): Promise<OperationResponse>;
    fetchLocalFile(documentPath: string, localPath: string): string | null;
    export(file: string, language: string, documentPath: string, options: any): Promise<{}>;
    exportJipt(file: string, documentPath: string): Promise<{}>;
    parseDocumentName(file: string, config: DocumentConfig): string;
    private encodeQuery;
    private authorizationHeader;
    private resolveNamePattern;
    private writeResponseToFile;
    private handleResponse;
}
